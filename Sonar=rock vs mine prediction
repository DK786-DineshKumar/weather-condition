{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# importing the dependences()\n","import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score"],"metadata":{"id":"CiEO0zwTTHdl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# data collection and data perprossinng\n","sonar_data=pd.read_csv(\"/content/Copy of sonar data.csv\",header=None)"],"metadata":{"id":"oCB72LNJT3GB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sonar_data.head(5)"],"metadata":{"id":"S_MMailHURgp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# number of the rows and coloums\n","sonar_data.shape"],"metadata":{"id":"GQL_ggLnUofS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sonar_data.describe()"],"metadata":{"id":"G9mFdMzYVPXb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sonar_data.value_counts()"],"metadata":{"id":"JbLgv5_qVeXQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sonar_data[60].value_counts()"],"metadata":{"id":"pEPspS2dVswa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#To find out the mean value from 60th coloums\n","sonar_data.groupby(60).mean()"],"metadata":{"id":"WC37m5orWd9Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# sperating data and lable\n","x=sonar_data.drop(columns=60,axis=1)\n","y=sonar_data[60]"],"metadata":{"id":"8Rk8hsuWWw0U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(x)\n","print(y)"],"metadata":{"id":"FbUMZNXQXmuL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,stratify=y,random_state=1)"],"metadata":{"id":"rSRtn3zDfVTT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(x_train,x_test,y_train,y_test)"],"metadata":{"id":"dIciSyPvgaFG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(x_train)\n","print(y_train)"],"metadata":{"id":"p3-OFtY8gyPT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Model traning LogisticRegression\n","model=LogisticRegression()\n"],"metadata":{"id":"TfSoWZczhDza"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#traing the Logistic regression model with the training datasets\n","model.fit(x_train,y_train)"],"metadata":{"id":"rlznTnSZnqoM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#model evalution\n","#Accuracy on the training data\n","x_train_prediction=model.predict(x_train)\n","training_data_accuracy=accuracy_score(x_train_prediction,y_train)\n","print(\"Accuracy on the training data\",training_data_accuracy)"],"metadata":{"id":"W3diyYGCtGgz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Accuracy on the training data\n","x_test_prediction=model.predict(x_test)\n","test_data_accuracy=accuracy_score(x_test_prediction,y_test)\n","print(\"Accuracy on the training data\",test_data_accuracy)"],"metadata":{"id":"tXiYGEyYxK6-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Making a predictive system\n","input_data=(\",0.4454,0.3707,0.2891,0.2185,0.1711,0.3578,0.3947,0.2867,0.2401,0.3619,0.3314,0.3763,0.4767,0.4059,0.3661,0.2320,0.1450,0.1017,0.1111,0.0655,0.0271,0.0244,0.0179,0.0109,0.0147,0.0170,0.0158,0.0046,0.0073,0.0054,0.0033,0.0045,0.0079\")\n","#chaning the input_data from numpy array\n","input_data_as_numpy_array=np.asarray(input_data)\n","#reshape the np.array as  we  are predicting for one instanes\n","input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)\n","#prediction = model.predict(input_data_reshaped)\n","print(prediction)"],"metadata":{"id":"osF9Tr1DxrqV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["input_data=(0.0195,0.0142,0.0181,0.0406,0.0391,0.0249,0.0892,0.0973,0.0840,0.1191,0.1522,0.1322,0.1434,0.1244,0.0653,0.0890,0.1226,0.1846,0.3880,0.3658,0.2297,0.2610,0.4193,0.5848,0.5643,0.5448,0.4772,0.6897,0.9797,1.0000,0.9546,0.8835,0.7662,0.6547,0.5447,0.4593,0.4679,0.1987,0.0699,0.1493,0.1713,0.1654,0.2600,0.3846,0.3754,0.2414,0.1077,0.0224,0.0155,0.0187,0.0125,0.0028,0.0067,0.0120,0.0012,0.0022,0.0058,0.0042,0.0067,0.0012)\n","\n","# changing the input_data to a numpy array\n","input_data_as_numpy_array = np.asarray(input_data)\n","\n","# reshape the np array as we are predicting for one instance\n","input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)\n","\n","prediction = model.predict(input_data_reshaped)\n","print(prediction)"],"metadata":{"id":"6FRVPcvt7p9y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if (prediction[0]=='M'):\n","    print(\"The Object is Mine\")\n","else:\n","  print(\"The Object is Rock\")\n","\n"],"metadata":{"id":"63Ja6V109T9x"},"execution_count":null,"outputs":[]}]}